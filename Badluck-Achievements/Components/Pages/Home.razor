@page "/"
@using Badluck_Achievements.Components.Models
@using global::Components.Services_Achievements.Components
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject SteamAchievementService SteamAchievementService

<PageTitle>Badluck Achievements</PageTitle>

<main>
    <section class="game-news">
        @if (isLoadingNews)
        {
            <p><em>Loading news...</em></p>
        }
        else if (news is null || !news.Any())
        {
            <p><em>No news available.</em></p>
        }
        else
        {
            <h2>Game News</h2>
            @foreach (var item in news)
            {
                <article>
                    <h3><a href="@item.newsUrl" target="_blank">@item.topic</a></h3>
                    <p>@item.description</p>
                </article>
            }
        }
    </section>

    <section class="popular-games">
        @if (isLoadingGames)
        {
            <p><em>Loading games...</em></p>
        }
        else if (popularGames is null || !popularGames.Any())
        {
            <p><em>No popular games found.</em></p>
        }
        else
        {
            <h2>Popular Games</h2>
            <div class="games-grid">
                @foreach (var game in popularGames)
                {
                    <div class="game-card">
                        <img class="game-img" src="@game.img" alt="@game.name">
                        <div class="game-info">@game.name</div>
                    </div>
                }
            </div>
        }
    </section>

    <section class="latest-achievements">
        @if (isLoadingAchievements)
        {
            <p><em>Loading achievments...</em></p>
        }
        else if (achievements is null || !achievements.Any())
        {
            <p><em>No achievments available.</em></p>
        }
        else
        {
            <h2>Latest Achievements</h2>
            @foreach (var item in achievements)
            {
                <div class="achievement">
                    <img src="@item.iconUrl" alt="Achievement Icon">
                    <p>Completed on: @item.unlockTime.Value</p>
                    <p>Global Completion: 12.5%</p>
                </div>
            }
        }
    </section>
</main>

@code {
    private List<SteamGame>? popularGames;
    private List<GamingNews>? news;
    private List<SteamAchievement>? achievements;

    private bool isLoadingNews = true;
    private bool isLoadingGames = true;
    private bool isLoadingAchievements = true;

    [CascadingParameter]
    public string steamId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.WhenAll(
                LoadPopularGamesAsync(),
                LoadGamingNewsAsync(),
                LoadLatestAchievments()
            );
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadPopularGamesAsync()
    {
        isLoadingGames = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync("https://store.steampowered.com/search/results?category1=998&json=1");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var parsed = JObject.Parse(json);
                popularGames = parsed["items"]?
                    .Select(item => new SteamGame(
                        item.Value<string>("name") ?? "Unknown",
                        item.Value<string>("logo") ?? "default.png"
                    ))
                    .ToList();
            }
        }
        finally
        {
            isLoadingGames = false;
        }
    }

    private async Task LoadGamingNewsAsync()
    {
        isLoadingNews = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.UserAgent.ParseAdd("Badluck-Achievements");
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            var apiKey = Configuration["ApiKeys:NewsApiKey"];
            var url = $"https://newsapi.org/v2/everything?q=gaming&apiKey={apiKey}&pageSize=8";


            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var parsed = JObject.Parse(json);
                news = parsed["articles"]?
                    .Select(article => new GamingNews(
                        article.Value<string>("title") ?? "No title",
                        article.Value<string>("description") ?? "No description",
                        article.Value<string>("url") ?? "#"
                    ))
                    .ToList();
            }
        }
        finally
        {
            isLoadingNews = false;
        }
    }

    private async Task LoadLatestAchievments()
    {
        isLoadingAchievements = true;
        try
        {
            achievements = await SteamAchievementService.GetGameAchievementsAsync(ulong.Parse(steamId), 322170);
            achievements = achievements.OrderBy(x => x.unlockTime).Skip(Math.Max(0, achievements.Count() - 5)).ToList();
        }
        finally
        {
            isLoadingAchievements = false;
        }
    }
}