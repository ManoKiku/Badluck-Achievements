@page "/"
@using Badluck_Achievements.Components.Models
@using global::Components.Services_Achievements.Components
@using System.Text;
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject SteamAchievementService SteamAchievementService
@inject BadluckAchievementsService BadluckAchievementsService

<PageTitle>Badluck Achievements</PageTitle>

<article class="content">
    @if (isLoadingNews)
    {
        <p><em>Loading news...</em></p>
    }
    else if (news is not null && news.Any())
    {
        <section class="game-news">
            <h2><i class="fas fa-newspaper"></i> Game News</h2>
            @foreach (var item in news)
            {
                <div class="news-card">
                    <h3><a href="@item.newsUrl" target="_blank">@item.topic</a></h3>
                    <p>@item.description</p>
                    <div class="news-meta">
                        <span><i class="far fa-calendar"></i> @item.time?.ToString("yyyy MMM dd")</span>
                    </div>
                </div>
            }
        </section>
    }

    @if (isLoadingGames)
    {
        <p><em>Loading games...</em></p>
    }
    else if (popularGames is not null && popularGames.Any())
    {
        <section class="popular-games">
            <h2><i class="fas fa-fire"></i> Popular Games</h2>
            @foreach (var item in popularGames)
            {
                <div class="games-grid">
                    <div class="game-card">
                        <img class="game-banner" src="@item.img" alt="Game Banner">
                        <div class="game-overlay">
                            <div class="game-title"> @item.name</div>
                            <div class="game-stats">
                                <span><i class="fas fa-users">  @FormatNumberToK(@item.playersCount)</i></span>
                                <span><i class="fas fa-medal">@item.achievementsCount</i></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </section>
    }

    <div class="sidebar-right">
        @if (isLoadingAchievements)
        {
            <p><em>Loading achievments...</em></p>
        }
        else if (achievements is not null && achievements.Any())
        {
            <section class="latest-achievements">
                <h2><i class="fas fa-trophy"></i> Random game achievements</h2>
                @foreach (var item in achievements)
                {
                    <div class="achievement-card">
                        <img src="@item.iconUrl" alt="Achievement Icon" class="achievement-icon">
                        <div class="achievement-details">
                            <div class="achievement-title">@item.name</div>
                            <div class="achievement-meta">
                                <span>Completed: @item.unlockTime?.ToString("yyyy MMM dd")</span>
                                <span>Rarity: @item.achievePercentage%</span>
                            </div>
                            <div class="achievement-progress">
                                <div class="progress-bar" style="width: @item.achievePercentage%"></div>
                            </div>
                        </div>
                    </div>
                }
            </section>
        }

        @if(isLoadingStats)
        {
            <p><em>Loading stats...</em></p>
        }
        else if (stats is not null)
        {
            <section class="user-stats">
                <h2><i class="fas fa-chart-line"></i> Your Stats</h2>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-medal"></i> Total Achievements</span>
                    <span class="stat-value">@stats.totalAchievements</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-gamepad"></i> Total games</span>
                    <span class="stat-value">@stats.totalGames</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-star"></i> Completion Rate</span>
                    <span class="stat-value">@((int)(@stats.CalculateCompetionRate() * 100))%</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-ranking-star"></i> Global Rank</span>
                    <span class="stat-value">#1</span>
                </div>
            </section>
        }
    </div>
</article>

@code {
    private List<SteamGame>? popularGames;
    private List<GamingNews>? news;
    private List<SteamAchievement>? achievements;
    private UserStats? stats;

    private bool isLoadingNews = true;
    private bool isLoadingGames = true;
    private bool isLoadingAchievements = true;
    private bool isLoadingStats = true;

    [CascadingParameter]
    public Sesion? sesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient();
            var popularGamesTask = BadluckAchievementsService.LoadPopularGamesAsync(httpClient, 16);
            var newsTask = BadluckAchievementsService.LoadGamingNewsAsync(httpClient);
            Task<List<SteamAchievement>?>? achievementsTask = null;
            Task<UserStats?>? statsTask = null;

            if (sesion!.isAuthenticated)
            {
                var steamId = ulong.Parse(sesion.steamId);
                achievementsTask = BadluckAchievementsService.LoadLatestAchievements(httpClient, steamId);
                statsTask = BadluckAchievementsService.LoadUserStats(httpClient, steamId);
            }

            var tasks = new List<Task> { popularGamesTask, newsTask };
            if (sesion!.isAuthenticated)
            {
                tasks.Add(achievementsTask);
                tasks.Add(statsTask);
            }

            await Task.WhenAll(tasks);

            popularGames = await popularGamesTask;
            news = await newsTask;

            if (sesion.isAuthenticated)
            {
                achievements = await achievementsTask;
                stats = await statsTask;
            }

            isLoadingNews = false;
            isLoadingGames = false;
            isLoadingStats = false;
            isLoadingAchievements = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    public static string FormatNumberToK(uint number)
    {
        if (number >= 1000000)
            return (number / 1000000).ToString("0.#") + "M";
        else if (number >= 1000)
            return (number / 1000).ToString("0.#") + "k";
        else
            return number.ToString();
    }
}