@page "/"
@using Badluck_Achievements.Components.Models
@using System.Text.RegularExpressions
@using global::Components.Services_Achievements.Components
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject SteamAchievementService SteamAchievementService

<PageTitle>Badluck Achievements</PageTitle>

<article class="content">
    @if (isLoadingNews)
    {
        <p><em>Loading news...</em></p>
    }
    else if (news is null || !news.Any())
    {
        <p><em>No news available.</em></p>
    }
    else
    {
        <section class="game-news">
            <h2><i class="fas fa-newspaper"></i> Game News</h2>
            @foreach (var item in news)
            {
                <div class="news-card">
                    <h3><a href="@item.newsUrl" target="_blank">@item.topic</a></h3>
                    <p>@item.description</p>
                    <div class="news-meta">
                        <span><i class="far fa-calendar"></i> @item.time?.ToString("yyyy MMM dd")</span>
                    </div>
                </div>
            }
        </section>
    }

    @if (isLoadingGames)
    {
        <p><em>Loading games...</em></p>
    }
    else if (popularGames is null || !popularGames.Any())
    {
        <p><em>No games available.</em></p>
    }
    else
    {
        <section class="popular-games">
            <h2><i class="fas fa-fire"></i> Popular Games</h2>
            @foreach (var item in popularGames)
            {
                <div class="games-grid">
                    <div class="game-card">
                        <img class="game-banner" src="@item.img" alt="Game Banner">
                        <div class="game-overlay">
                            <div class="game-title"> @item.name</div>
                            <div class="game-stats">
                                <span><i class="fas fa-users">  @FormatNumberToK(@item.playersCount) players</i></span>
                                <span><i class="fas fa-medal">  @item.achievmentsCount achievements</i></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </section>
    }

    <div class="sidebar-right">
        @if (isLoadingAchievements)
        {
            <p><em>Loading achievments...</em></p>
        }
        else if (achievements is null || !achievements.Any())
        {
            <p><em>No achievments available.</em></p>
        }
        else
        {
            <section class="latest-achievements">
                <h2><i class="fas fa-trophy"></i> Random game achievements</h2>
                @foreach (var item in achievements)
                {
                    <div class="achievement-card">
                        <img src="@item.iconUrl" alt="Achievement Icon" class="achievement-icon">
                        <div class="achievement-details">
                            <div class="achievement-title">@item.name</div>
                            <div class="achievement-meta">
                                <span>Completed: @item.unlockTime?.ToString("yyyy MMM dd")</span>
                                <span>Rarity: @item.achievePercentage%</span>
                            </div>
                            <div class="achievement-progress">
                                <div class="progress-bar" style="width: @item.achievePercentage%"></div>
                            </div>
                        </div>
                    </div>
                }
            </section>
        }


        <section class="user-stats">
            <h2><i class="fas fa-chart-line"></i> Your Stats</h2>
            <div class="stat-item">
                <span class="stat-label"><i class="fas fa-medal"></i> Total Achievements</span>
                <span class="stat-value">247</span>
            </div>
            <div class="stat-item">
                <span class="stat-label"><i class="fas fa-gamepad"></i> Games Played</span>
                <span class="stat-value">42</span>
            </div>
            <div class="stat-item">
                <span class="stat-label"><i class="fas fa-star"></i> Completion Rate</span>
                <span class="stat-value">68%</span>
            </div>
            <div class="stat-item">
                <span class="stat-label"><i class="fas fa-ranking-star"></i> Global Rank</span>
                <span class="stat-value">#1,245</span>
            </div>
        </section>
    </div>
</article>

@code {
    private List<SteamGame>? popularGames;
    private List<GamingNews>? news;
    private List<SteamAchievement>? achievements;

    private bool isLoadingNews = true;
    private bool isLoadingGames = true;
    private bool isLoadingAchievements = true;

    [CascadingParameter]
    public Sesion sesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.WhenAll(
                LoadPopularGamesAsync(),
                LoadGamingNewsAsync(),
                LoadLatestAchievments()
            );
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadPopularGamesAsync()
    {
        isLoadingGames = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync("https://store.steampowered.com/search/results?category1=998&json=1");

            if (response.IsSuccessStatusCode)
            {
                popularGames = new List<SteamGame>();

                var json = await response.Content.ReadAsStringAsync();
                var parsed = JObject.Parse(json);

                await Parallel.ForEachAsync(parsed["items"]!.Take(8), async (item, ct) =>
                {
                    try
                    {
                        Match match = Regex.Match(item.Value<string>("logo")!, @"/apps/(\d+)");
                        string? appID = string.Empty;
                        if (match.Success)
                        {
                            appID = match.Groups[1].Value;
                        }

                        var httpClient = HttpClientFactory.CreateClient();
                        var url = $"http://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v0002/?gameid={appID}&format=json";

                        var response = await httpClient.GetAsync(url);

                        uint achievementsCount = 0;
                        if (response.IsSuccessStatusCode)
                        {
                            var json = await response.Content.ReadAsStringAsync();
                            var parsed = JObject.Parse(json);
                            achievementsCount = (uint)parsed["achievementpercentages"]["achievements"].Count();
                        }

                        uint playersCount = await SteamAchievementService.
                        GetNumberOfCurrentPlayersForGameAsync(uint.Parse(appID));

                        popularGames.Add(new SteamGame(
                            item.Value<string>("name") ?? "Unknown",
                            item.Value<string>("logo") ?? "default.png",
                            achievementsCount,
                            playersCount));
                        }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }


                });
            }
        }
        finally
        {
            isLoadingGames = false;
        }
    }


    private async Task LoadGamingNewsAsync()
    {
        isLoadingNews = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.UserAgent.ParseAdd("Badluck-Achievements");
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            var apiKey = Configuration["ApiKeys:NewsApiKey"];
            var url = $"https://newsapi.org/v2/everything?q=gaming&apiKey={apiKey}&pageSize=3";


            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var parsed = JObject.Parse(json);

                news = parsed["articles"]?
                    .Select(article => new GamingNews(
                        article.Value<string>("title") ?? "No title",
                        article.Value<string>("description") ?? "No description",
                        article.Value<string>("url") ?? "#",
                        DateTime.Parse(article.Value<string>("publishedAt")!)
                )).ToList();
            }
        }
        finally
        {
            isLoadingNews = false;
        }
    }

    private async Task LoadLatestAchievments()
    {
        isLoadingAchievements = true;
        try
        {
            if(sesion.isAuthenticated)
            {
                Random random = new Random();
                achievements = new List<SteamAchievement>();
                for (int i = 0; achievements.Where(x => x.isAchieved).Count() == 0 && i < 10; ++i)
                {
                    var games = await SteamAchievementService.GetPlayerGames(ulong.Parse(sesion.steamId));

                    achievements = await SteamAchievementService.
                            GetGameAchievementsAsync(ulong.Parse(sesion.steamId),
                            games[random.Next(0, games.Count() - 1)].appID);
                }


                achievements = achievements.OrderBy(x => x.unlockTime).Skip(Math.Max(0, achievements.Count() - 5)).Reverse().ToList();
            }
        }
        finally
        {
            isLoadingAchievements = false;
        }
    }

    public static string FormatNumberToK(uint number)
    {
        if (number >= 1000000)
            return (number / 1000000).ToString("0.#") + "M";
        else if (number >= 1000)
            return (number / 1000).ToString("0.#") + "k";
        else
            return number.ToString();
    }
}