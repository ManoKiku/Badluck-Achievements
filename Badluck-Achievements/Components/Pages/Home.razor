@page "/"
@using Badluck_Achievements.Components.Models

<PageTitle>Badluck Achievments</PageTitle>


<main>
    <section class="game-news">
        <h2>Game news</h2>
        <article>
            <h2><a href="#">Exciting Game Update Released!</a></h2>
            <p>Developers have launched a new patch bringing fresh content and features...</p>
        </article>
        <article>
            <h2><a href="#">New Expansion Announced</a></h2>
            <p>The upcoming expansion promises an immersive storyline and thrilling gameplay...</p>
        </article>
    </section>
    <section class="popular-games">
        @if (popularGames == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <h2>Popular Games</h2>
            @foreach (var i in popularGames)
            {
                <div class="game-card">
                    <img class="game-img" src="@i.img" alt="Game Image">
                    <div class="game-info">@i.name</div>
                </div>
            }
        }
    </section>
    <section class="latest-achievements">
        <h2>Latest achievements</h2>
        <div class="achievement">
            <img src="achievement1.png" alt="Achievement Icon">
            <p>Completed on: <time datetime="2025-03-28">March 28, 2025</time></p>
            <p>Global Completion: 12.5%</p>
        </div>
        <div class="achievement">
            <img src="achievement2.png" alt="Achievement Icon">
            <p>Completed on: <time datetime="2025-03-25">March 25, 2025</time></p>
            <p>Global Completion: 8.3%</p>
        </div>
    </section>
</main>


@code{
    private List<SteamGame>? popularGames;

    protected override async Task OnInitializedAsync()
    {
        popularGames = await GetSteamAchivments();
    }

    async Task<List<SteamGame>> GetSteamAchivments()
    {
        List<SteamGame> popularGames = new List<SteamGame>();

        HttpClient httpClient = new HttpClient();

        //Get most popular games
        var response = await httpClient.GetAsync($"https://store.steampowered.com/search/results?category1=998&json=1");

        if (!response.IsSuccessStatusCode)
        {
            return popularGames;
        }

        string? json = await response.Content.ReadAsStringAsync();

        if (json == null)
        {
            return popularGames;
        }

        JObject parsed = JObject.Parse(json);

        if (parsed.Count == 0)
        {
            return popularGames;
        }

        //Parse answer json to SteamGame objects
        foreach (var i in parsed["items"]!)
        {
            popularGames.Add(new SteamGame(i.Value<string>("name")!, i.Value<string>("logo")!));
        }

        return popularGames;
    }
}