@page "/"
@using Badluck_Achievements.Components.Data
@using Badluck_Achievements.Components.Models
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using global::Components.Services
@using global::Components.Services_Achievements.Components
@using System.Text;

@inject AppDbContext AppDbContext
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject SteamAchievementService SteamAchievementService
@inject BadluckAchievementsService BadluckAchievementsService

<PageTitle>Badluck Achievements</PageTitle>

<article class="content">
    @if (isLoadingNews)
    {
        <p><em>Loading news...</em></p>
    }
    else if (news is not null && news.Any())
    {
        <section class="game-news">
            <h2><i class="fas fa-newspaper"></i> Game News</h2>
            @foreach (var item in news)
            {
                <div class="news-card">
                    <h3><a href="@item.newsUrl" target="_blank">@item.topic</a></h3>
                    <p>@item.description</p>
                    <div class="news-meta">
                        <span><i class="far fa-calendar"></i> @item.time?.ToString("yyyy MMM dd", CultureInfo.InvariantCulture)</span>
                    </div>
                </div>
            }
        </section>
    }

    @if (isLoadingGames)
    {
        <p><em>Loading games...</em></p>
    }
    else if (popularGames is not null && popularGames.Any())
    {
        <section class="popular-games">
            <h2><i class="fas fa-fire"></i> Popular Games</h2>
            @foreach (var item in popularGames)
            {
                <a href="/game?id=@item.appID">
                    <div class="games-grid">
                        <div class="game-card">
                            <img class="game-banner" src="@item.img" alt="Game Banner">
                            <div class="game-overlay">
                                <div class="game-title"> @item.name</div>
                                <div class="game-stats">
                                    <span><i class="fas fa-users">  @FormatNumberToK((uint)@item.playersCount)</i></span>
                                    <span><i class="fas fa-medal">@item.achievementsCount</i></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </a>
            }
        </section>
    }

    <div class="sidebar-right">
        @if (isLoadingAchievements)
        {
            <p><em>Loading achievments...</em></p>
        }
        else if (achievements is not null && achievements.Any())
        {
            <section class="latest-achievements">
                <h2><i class="fas fa-trophy"></i> Achievements</h2>
                @foreach (var item in achievements)
                {
                    <div class="achievement-card">
                        <img src="@item.IconUrl" alt="Achievement Icon" class="achievement-icon">
                        <div class="achievement-details">
                            <div class="achievement-title">@item.Name</div>
                            <div class="achievement-meta">
                                <span>Rarity: @item.Rarity%</span>
                            </div>
                            <div class="achievement-progress">
                                <div class="progress-bar" style="width: @item.Rarity%"></div>
                            </div>
                        </div>
                    </div>
                }
            </section>
        }

        @if(isLoadingStats)
        {
            <p><em>Loading stats...</em></p>
        }
        else if (currentUser != null)
        {
            <section class="user-stats">
                <h2><i class="fas fa-chart-line"></i> Your Stats</h2>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-medal"></i> Completed Achievements </span>
                    <span class="stat-value">@currentUser.UserAchievements.Count</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-gamepad"></i> Total games</span>
                    <span class="stat-value">@gameCount</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><i class="fas fa-star"></i> Global Rank</span>
                    <span class="stat-value">#@leaderboardTop</span>
                </div>
            </section>
        }
    </div>
</article>

@code {
    private List<SteamGame>? popularGames;
    private List<GamingNews>? news;

    private bool isLoadingNews = true;
    private bool isLoadingGames = true;
    private bool isLoadingAchievements = true;
    private bool isLoadingStats = true;

    [CascadingParameter]
    public Sesion? sesion { get; set; }

    private Data.User? currentUser { get; set; }
    private List<Achievement> achievements { get; set; }
    private uint gameCount { get; set; } = 0;
    private int leaderboardTop = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient();
            var popularGamesTask = BadluckAchievementsService.LoadGamesAsync(11, httpClient : httpClient);
            var newsTask = BadluckAchievementsService.LoadGamingNewsAsync(httpClient);


            if (sesion!.IsAuthenticated)
            {
                var steamId = ulong.Parse(sesion.SteamId);
                currentUser = AppDbContext.Users
                    .Include(x => x.UserAchievements)
                    .ThenInclude(x => x.Achievement)
                    .ThenInclude(x => x.Game)
                    .FirstOrDefault(x => x.SteamId == steamId);
                var buff = await SteamAchievementService.GetOwnedGames(steamId);
                 
                gameCount = buff != null ? (uint)buff.OwnedGames.Count : 0;

                leaderboardTop = AppDbContext.LeaderBoards
                    .Include(x => x.User)
                    .ToList()
                    .OrderByDescending(x => x.Score)
                    .Select(x => x.User)
                    .ToList()
                    .IndexOf(currentUser) + 1;

                Random random = new Random();

                achievements = currentUser.UserAchievements
                    .Select(x => x.Achievement)
                    .ToList();

                var allGames = achievements.Select(x => x.Game).DistinctBy(x => x.GameId);

                ulong randomId = allGames.ElementAt(random.Next(0, allGames.Count() - 1)).GameId;

                achievements = achievements
                    .Where(x => x.GameId == randomId)
                    .OrderBy(x => x.Rarity)
                    .Take(5)
                    .ToList();
            }

            var tasks = new List<Task> { popularGamesTask, newsTask };

            await Task.WhenAll(tasks);

            popularGames = await popularGamesTask;
            news = await newsTask;

            isLoadingNews = false;
            isLoadingGames = false;
            isLoadingStats = false;
            isLoadingAchievements = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    public static string FormatNumberToK(uint number)
    {
        if (number >= 1000000)
            return (number / 1000000).ToString("0.#") + "M";
        else if (number >= 1000)
            return (number / 1000).ToString("0.#") + "k";
        else
            return number.ToString();
    }
}