@using Badluck_Achievements.Components.Data
@using Badluck_Achievements.Components.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Badluck Achievements - Discussions</PageTitle>

<div class="container">
	<div class="add-discussion">
		<div class="discussion-form" onsubmit="return false;">
			<input type="text" placeholder="Title" required @bind="title">
			<textarea placeholder="Description (max 1000 symbols)" maxlength="1000" required @bind="description"></textarea>
			<div class="char-counter"><span id="charCount">0</span>/1000</div>
			<button class="submit-btn" @onclick="CreateDiscussion">Create discussion</button>
		</div>
	</div>

	<div class="discussions-list">
		@if (isLoading)
		{
			<span>Discussions are loading</span>
		}
		else if (!(toShow == null || !toShow.Any()))
		{
			@foreach (var discussion in toShow.OrderByDescending(x => x.DiscussionId))
			{
				<div class="discussion-item">
					<a href="/user?id=@discussion.Author.SteamId">
						@if (discussion.Author != null)
						{
							<img class="discussion-avatar" src="@discussion.Author.IconPath" alt="Avatar" />
							<div class="discussion-author">@discussion.Author.Username</div>
						}
					</a>
					<a href="/discussion?id=@discussion.DiscussionId">
						<div class="discussion-title">@discussion.Title</div>
						@if (discussion.Content != null)
						{
							<div class="discussion-content">
								@discussion.Content.Substring(0, Math.Min(150, discussion.Content.Length))...
							</div>
						}
					</a>
					<div class="discussion-stats">
						<div class="likes">
							<i class="fa-solid fa-heart"></i>
							@discussion.Likes.Count
						</div>
						<div class="comments">
							<i class="fa-solid fa-comment"></i>
							@discussion.Comments.Count
						</div>
					</div>

				</div>
			}
		}
	</div>

	<div class="pagination">
		@if (isLoading)
		{
			<span>Discussions are loading</span>
		}
		else if (discussions == null || !discussions.Any())
		{
			<span>No discussions to show</span>
		}
		else
		{
			@for (int i = 0; i < maxPage; ++i)
			{
				var pageNumber = i + 1;
				<div class="page-number @(pageNumber == page ? "active" : "")"
				@onclick="() => ChangePage(pageNumber)">
					@pageNumber
				</div>
			}
		}
	</div>
</div>

@code {
	private List<Discussion> discussions = new List<Discussion>();
	private List<Discussion> toShow = new List<Discussion>();
	private int page = 1;
	private int maxPage = 1;

	private string title { get; set; }
	private string description { get; set; }

	private bool isLoading = true;

	[Parameter]
	public Sesion? sesion { get; set; }

	protected override void OnParametersSet()
	{
		if (!isLoading)
			return;

		discussions = DbContext.Discussions
			.Include(x => x.Author)
			.Include(x => x.Likes)
			.Include(x => x.Comments)
			.ToList();

		maxPage = Convert.ToInt32(Math.Ceiling(discussions.ToList().Count / 5.0));

		if (maxPage == 0)
			maxPage = 1;

		if (page > maxPage)
			page = maxPage;
		else if (page <= 0)
			page = 1;

		var chunks = discussions.Chunk(5);

		if (chunks.Count() != 0)
		{
			toShow = chunks.ElementAt(page - 1).ToList();
		}

		isLoading = false;
	}

	private void ChangePage(int newPage)
	{
		if (newPage > maxPage)
			newPage = maxPage;

		page = newPage;

		var chunks = discussions.Chunk(5);

		if (chunks.Count() != 0)
		{
			toShow = chunks.ElementAt(page - 1).ToList();
		}
	}

	private bool isCreated = false;
	private void CreateDiscussion(MouseEventArgs args)
	{
		if (isCreated)
			return;

		if (sesion == null)
		{
			NavigationManager.NavigateTo("/", true);
			return;
		}

		var steamId = Convert.ToUInt64(sesion.SteamId);

		var author = DbContext.Users.FirstOrDefault(x => x.SteamId == steamId);

		if (author == null)
			return;

		var entity = DbContext.Discussions.Add(new Discussion
        {
            AuthorId = author.UserId,
            Content = description,
            Title = title
        });
		DbContext.SaveChanges();

		isCreated = true;
		NavigationManager.NavigateTo($"discussion?id={entity.Entity.DiscussionId}", true);
	}
}
