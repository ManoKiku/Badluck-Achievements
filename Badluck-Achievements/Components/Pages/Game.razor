@using Badluck_Achievements.Components.Models
@using Microsoft.AspNetCore.WebUtilities
@using Steam.Models.SteamCommunity
@using System.Text.RegularExpressions
@using global::Components.Services
@using global::Components.Services_Achievements.Components
@using Microsoft.JSInterop

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject SteamAchievementService SteamAchievementService
@inject BadluckAchievementsService BadluckAchievementsService
@inject IJSRuntime JSRuntime

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/Game"

<div class="container">
    <div class="left-column">
        @if(isLoadingAnalytics)
        {
            <p><em>Loading data...</em></p>
        }
        else if(analytics is not null)
        {
            <div class="game-header" style="background-color: #2a2a2a">
                <div class="header-content">
                    <img src="https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/@id/header.jpg"
                         class="game-logo" alt="Logo" style="width: auto;max-width: 300px;">
                    <div class="header-info">
                        <h1>@(analytics.Value<string>("name"))</h1>
                        <div class="release-date">Release Date: @(analytics["release_date"].Value<string>("date"))</div>
                        <div class="game-genres">Genres: @(string.Join(", ", analytics["genres"]!.Select(x => x.Value<string>("description"))))</div>
                        <div class="game-developers">Developer: @(analytics["developers"]!.First())</div>
                    </div>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-box" style="background-color: #2a2a2a">
                    <div class="stat-value">
                        <i class="fa-solid fa-star"></i> @((uint)(reviews["query_summary"].Value<uint>("total_positive") / reviews["query_summary"].Value<double>("total_reviews") * 100))%
                    </div>
                    <div class="stat-label">Positive Reviews</div>
                </div>
                <div class="stat-box" style="background-color: #2a2a2a">
                    <div class="stat-value"><i class="fa-solid fa-users"></i> @(players.LastOrDefault().Item2)</div>
                    <div class="stat-label">Current Players</div>
                </div>
                <div class="stat-box" style="background-color: #2a2a2a">
                    <div class="stat-value"><i class="fa-solid fa-trophy"></i> @(analytics.ContainsKey("achievements") ? analytics["achievements"].Value<string>("total") : 0)</div>
                    <div class="stat-label">Achievements</div>
                </div>
                <div class="stat-box" style="background-color: #2a2a2a">
                    <div class="stat-value"><i class="fa-solid fa-globe"></i> @(analytics.Value<string>("supported_languages").Count(x => x == ',') + 1)</div>
                    <div class="stat-label">Supported Languages</div>
                </div>

            </div>

            <div class="content-grid">
                <div class="description-box" style="background-color: #2a2a2a">
                    <h2>About the Game</h2>
                    <p style="max-height: 250px;overflow-y: auto;">@(Regex.Replace(analytics.Value<string>("detailed_description"), "<[^>]*>", string.Empty))</p>
                </div>

                @*          <div class="requirements-box" style="background-color: #2a2a2a">
                <h2>Requirements</h2>
                <div class="requirements">
                    <ul>
                        <li>OS: Windows® 10</li>
                        <li>Processor: Intel® Core™ i5 750</li>
                        <li>Memory: 8 GB RAM</li>
                    </ul>
                </div>
            </div>*@
            </div> 

            <div class="screenshots-section" style="background-color: #2a2a2a">
                <h2>Screenshots</h2>
                <div class="screenshots-scroll">
                    @foreach (JObject i in analytics["screenshots"]!)
                    {
                        <div class="screenshot-item">
                            <img src="@(i.Value<string>("path_thumbnail"))" alt="Screenshot">
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    @if (isLoadingAchievements)
    {
        <p><em>Loading achievements...</em></p>
    }
    else if(achievements is not null && achievements.Any())
    {
        <div class="middle-column">
            <div class="achievements-section" style="background-color: #1a1a1a">
                <h2>Achievements (@achievements.Count())</h2>
                <div class="achievements-grid">
                    @foreach (var i in achievements.OrderByDescending(x => x.AchievePercentage))
                    {
                        <div class="achievement-item">
                            <img src="@i.IconUrl"
                            class="achievement-icon" alt="Achievement">
                            <div class="achievement-info">
                                <h3 style="font-size: 1rem;">@i.Name</h3>
                                <div class="progress-bar">
                                    <div class="progress" style="width: @i.AchievePercentage%"></div>
                                </div>
                                <span>@i.AchievePercentage% of players</span>
                                @if(i.IsAchieved)
                                {
                                    <br>
                                    <span>Achieved at: @(i.UnlockTime?.ToString("yyyy-MM-dd"))</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    <div class="right-column">
        <section class="chart-section">
            <h2 class="section-title">Players Online History</h2>
            <div class="chart-container">
                <canvas id="playersChart"></canvas>
            </div>
        </section>
    </div>
</div>

<script>
    function renderPlayersChart(labels, playersData) {
    const canvas = document.getElementById('playersChart');
    const ctx = canvas.getContext('2d');

    new Chart(ctx, {
    type: 'line',
    data: {
    labels: labels,
    datasets: [{
    label: 'Players Online',
    data: playersData,
    borderColor: '#2A3F5F',
    backgroundColor: 'rgba(42, 63, 95, 0.1)',
    tension: 0.4,
    fill: true,
    borderWidth: 2,
    pointRadius: 3
    }]
    },
    options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
    y: {
    beginAtZero: false,
    title: {
    display: true,
    text: 'Players Online'
    },
    grid: {
    color: 'rgba(255,255,255,0.1)'
    }
    },
    x: {
    title: {
    display: true,
    text: 'Date'
    },
    grid: {
    display: false
    },
    ticks: {
    maxRotation: 45,
    minRotation: 45
    }
    }
    },
    plugins: {
    legend: {
    position: 'top',
    },
    tooltip: {
    mode: 'index',
    intersect: false
    }
    }
    }
    });
    }
</script>

@code{
    [CascadingParameter]
    public Sesion? sesion { get; set; }

    private string? id;

    private List<SteamAchievement>? achievements = null;
    private List<Tuple<DateTime, int>>? players = null;
    private JObject? analytics = null;
    private JObject? reviews = null;

    private bool isLoadingAchievements = true;
    private bool isLoadingPlayers = true;
    private bool isLoadingAnalytics = true;

    protected override async Task OnInitializedAsync()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("id", out var idValue))
        {
            id = idValue.FirstOrDefault()!;
        }

        uint gameId = uint.Parse(id);

        ulong steamId = 76561198836147236;
        if(sesion is not null)
        {
            ulong.TryParse(sesion.SteamId, out steamId);
        }

        Task<List<SteamAchievement>> achievementsTask = SteamAchievementService.GetGameAchievementsAsync(steamId, gameId);
        Task<List<Tuple<DateTime,int>>?> analyticsTask = BadluckAchievementsService.LoadGameTimeAnalytics(gameId, httpClient);
        Task<HttpResponseMessage> gameInfoTask = httpClient.GetAsync($"https://store.steampowered.com/api/appdetails?l=english&appids={id}");
        Task<HttpResponseMessage> reviewsTask = httpClient.GetAsync($"https://store.steampowered.com/appreviews/{id}?json=1&language=all");

        await Task.WhenAll(achievementsTask, analyticsTask, gameInfoTask, reviewsTask);

        achievements = achievementsTask.Result;
        players = analyticsTask.Result;

        var json = await gameInfoTask.Result.Content.ReadAsStringAsync();
        analytics = (JObject)JObject.Parse(json)[id]!["data"]!;
        json = await reviewsTask.Result.Content.ReadAsStringAsync();
        reviews = (JObject)JObject.Parse(json);

        Console.WriteLine(achievements.Count());

        isLoadingAchievements = false;
        isLoadingAnalytics = false;
        isLoadingPlayers = false;
    }

    bool isRendered = false;
    protected override async void OnAfterRender(bool firstRender)
    {
        if (!firstRender && players is not null)
        {
            await JSRuntime.InvokeVoidAsync("renderPlayersChart", 
                   players.Select(x => x.Item1.ToString("yyyy-MM-dd")),
                   players.Select(x => x.Item2));
        }
    }
}