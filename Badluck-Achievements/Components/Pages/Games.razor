@page "/Games"
@using Badluck_Achievements.Components.Models
@using global::Components.Services
@using global::Components.Services_Achievements.Components
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject BadluckAchievementsService BadluckAchievementsService
@inject SteamAchievementService SteamAchievementService
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="game-search-container">
    <div class="filters-container">
        <h4 class="text-main-blue mb-4">Search Filters</h4>

        <input type="text" class="search-bar" placeholder="Search games..." @bind="searchQuery">

        <div class="filter-section mb-4">
            <h5 class="text-main-blue mb-3">Categories</h5>
            <div class="categories-container">
                <div class="row">
                    <div class="col-md-12" style="height: 150px;overflow-y: auto;">
                        @foreach(var i in BadluckAchievementsService.tags)
                        {
                            <div class="category-item">
                                <input type="checkbox" class="category-checkbox" data-id="@i.Item1" @oninput="() => OnTagInput(i.Item1)">
                                <label class="category-label">@i.Item2</label>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="price-range">
            <h5 class="text-main-blue mb-3">Price Range</h5>
            <input type="range" class="form-range" id="priceSlider" min="0" max="11" step="1" @onchange="OnChangePrice">
            <p class="price-display text-main-blue mt-2" id="priceDisplay">Any price</p>
        </div>

        <button class="apply-button mt-4" @onclick="() => LoadGames()">Apply Filters</button>
    </div>

    <div class="main-content">
        @if (!isLoadingGames && games != null)
        {
            <div class="game-grid">
                @foreach (var i in games)
                {
                <a href="/game?id=@i.appID">
                    <div class="user-game-card">
                        <img src="https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/@i.appID/header.jpg" alt="Game Banner" class="game-banner" loading="lazy">
                        <div class="game-overlay">
                            <div class="game-title">@i.name</div>
                        </div>
                    </div>
                </a>
                }
            </div>
        }
    </div>
</div>

<script>
    function setListenerToRange() {
        const priceSlider = document.getElementById('priceSlider');

        const priceDisplay = document.getElementById('priceDisplay');

        priceSlider.addEventListener('input', function () {
            const value = parseInt(this.value);
            if (value === 0) {
                priceDisplay.textContent = 'Free';
            }
            else if (value === 11) {
                priceDisplay.textContent = 'Any price';
            }
            else {
                const price = value * 5;
                priceDisplay.textContent = `$${price}`;
            }
        });
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    private string searchQuery = string.Empty;
    private uint price { get; set; } = 11;

    private bool isLoadingGames = true;
    private List<SteamGame>? games = null;
    private List<uint> tags = new List<uint>();

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }

    private async Task LoadGames()
    {
        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient();
            var gamesTask = BadluckAchievementsService.LoadGamesAsync(
                48, 
                tags.Count == 0 ? null : tags, 
                null, 
                searchQuery == string.Empty ? null : searchQuery, 
                price == 11 ? null : price,
                false, 
                false, 
                httpClient
            );

            await Task.WhenAll(gamesTask);
            games = gamesTask.Result;
            isLoadingGames = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void OnTagInput(uint key)
    {
        if(tags.IndexOf(key) == -1)
        {
            tags.Add(key);
        }
        else
        {
            tags.Remove(key);
        }
    }

    private void OnChangePrice(ChangeEventArgs e)
    {
        price = uint.Parse(e.Value.ToString()) * 5;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setListenerToRange");
        }
    }
}
