@using Badluck_Achievements.Components.Data
﻿@using Badluck_Achievements.Components.Models
@using Microsoft.EntityFrameworkCore
@using SteamWebAPI2.Interfaces
@using SteamWebAPI2.Utilities
@using global::Components.Services
@using global::Components.Services_Achievements.Components
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SteamAchievementService SteamAchievementService
@inject AppDbContext AppDbContext

<CascadingValue Value="@sesion">
    <header class="header">

        <a href="/" class="logo">
            <img src="logo.png" alt="Site Logo" class="logo">
        </a>

        <div class="nav-buttons">
            <a href="/games"><i class="fas fa-gamepad"></i> Games</a>
            <a href="/leaderboard"><i class="fas fa-trophy"></i> Leaderboard</a>
@*             <a href="/achievements"><i class="fas fa-medal"></i> Achievements</a> *@
            <a href="/discussions"><i class="fa-solid fa-users"></i> Disucssions</a>
        </div>

        <div class="profile-container">
            <div class="profile">
                <div class="user-info">
                    <NavigationLayout sesion="sesion"/>
                </div>
            </div>
        </div>
    </header>

    <div class="page">
        @Body
    </div>
    <div class="mobile-nav-buttons">
        <a href="/games"><i class="fas fa-gamepad"></i> Games</a>
        <a href="/leaderboard"><i class="fas fa-trophy"></i> Leaderboard</a>
        <a href="/discussions"><i class="fa-solid fa-users"></i> Disucssions</a>
    </div>
    <footer>
        <div class="footer-content">
            <div>© 2025 Badluck Achievements. All rights reserved.</div>
            <div class="footer-links">
                <a href="/about">About</a>
                <a href="/privacy">Privacy Policy</a>
                @*              <a href="/terms">Terms of Service</a> *@
            </div>
            <div class="social-icons">
                <a href="https://www.youtube.com/channel/UC2uOhLFsjJWyzk3qPs7x4ig"><i class="fab fa-youtube"></i></a>
                <a href="https://discord.com/users/549927558339100674"><i class="fab fa-discord"></i></a>
                <a href="https://steamcommunity.com/id/ManoKiku/"><i class="fab fa-steam"></i></a>
                <a href="https://github.com/ManoKiku"><i class="fab fa-github"></i></a>
            </div>
        </div>
    </footer>
</CascadingValue>

@code {

    public Sesion sesion { get; set; } = new Sesion();

    [Inject]
    private IConfiguration Configuration { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        sesion.IsAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (sesion.IsAuthenticated)
        {
            sesion.SteamId = user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value!;

            if (sesion.SteamId != null)
            {
                sesion.SteamId = sesion.SteamId.Split('/').Last();
                await LoadSteamUserInfo(sesion.SteamId);
            }
        }
    }

    private async Task LoadSteamUserInfo(string steamId64)
    {
        ulong steamId = ulong.Parse(steamId64);
        try
        {
            var playerSummary = await SteamAchievementService.GetPlayerSummaries(steamId);

            var user = AppDbContext.Users.FirstOrDefault(x => x.SteamId == steamId);

            if(user == null)
            {
                AppDbContext.Users.Add(new Data.User
                {
                    SteamId = steamId,
                    IconPath = playerSummary.AvatarFullUrl,
                    Username = playerSummary.Nickname
                });

                AppDbContext.SaveChanges();

                var userStats = await SteamAchievementService.LoadUserStats(new HttpClient(), steamId);

                await AppDbContext.UpdateUserAchievements(steamId, userStats);
            }

            sesion.AvatarUrl = playerSummary.AvatarFullUrl;
            sesion.NameIdentifier = playerSummary.Nickname;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке информации Steam: {ex.Message}");
        }
    }

}