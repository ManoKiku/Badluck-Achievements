@page "/User"
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject BadluckAchievementsService BadluckAchievementsService
@inject SteamAchievementService SteamAchievementService
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@using Badluck_Achievements.Components.Models
@using Microsoft.AspNetCore.WebUtilities
@using Steam.Models.SteamCommunity
@using global::Components.Services_Achievements.Components

<PageTitle>Badluck Achievements - User profile</PageTitle>

<div class="page">
	<main>
		<article class="content px-4">
			<div class="profile-layout">
				<div class="profile-left">
					<div class="profile-card">
						@if (isLoadingModel)
						{
							<p><em>Profile is loading</em></p>
						}
						else if (model is null)
						{
							<p><em>No header available.</em></p>
						}
						else
						{
							<div class="profile-header">
								<img src="@model.AvatarFullUrl" alt="User Avatar" class="profile-avatar">
								<h2 class="profile-username">@model.Nickname</h2>
								<span class="profile-steamid">SteamID: @model.SteamId</span>
							</div>
						}

						@if(isLoadingStats)
						{
							<p><em>Stats is loading</em></p>
						}
						else if (stats is null)
						{
							<p><em>No stats available.</em></p>
						}
						else
						{
							<div class="profile-stats">
								<div class="stat-item">
									<span class="stat-label"><i class="fas fa-gamepad"></i> Games Owned</span>
									<span class="stat-value">@stats.totalGames</span>
								</div>
								<div class="stat-item">
									<span class="stat-label"><i class="fas fa-medal"></i> Total Achievements</span>
									<span class="stat-value">@stats.totalAchievements</span>
								</div>
								<div class="stat-item">
									<span class="stat-label"><i class="fas fa-star"></i> Completion Rate</span>
									<span class="stat-value">@((int)(stats.CalculateCompetionRate() * 100))%</span>
								</div>
								<div class="stat-item">
									<span class="stat-label"><i class="fas fa-clock"></i> Total Playtime</span>
									<span class="stat-value">@((int)stats.hoursPlayed) hrs</span>
								</div>
							</div>
						}
						<div class="profile-badges">
							<h3><i class="fas fa-award"></i> Recent Badges</h3>
							<div class="badges-grid">
								@if(isLoadingStats)
								{
									<p><em>Achievements is loading</em></p>
								}
								else if (stats is null)
								{
									<p><em>No achievements available.</em></p>
								}
								else if (stats.achievements.Any())
								{
									foreach (var i in stats.achievements.OrderBy(x => x.achievePercentage).Take(16))
									{
										<img src="@i.iconUrl" alt="@i.name" class="badge-icon" title="@i.achievePercentage%">
									}
								}
							</div>
						</div>
					</div>
				</div>
				<div class="profile-center">
					<div class="games-header">
						<h2><i class="fas fa-gamepad"></i> Games</h2>
						<div class="games-filter">
							<select class="filter-select" @onchange="OnFilter">
								<option value="All Games">All Games</option>
								<option value="100% Completed">100% Completed</option>
								<option value="In Progress">In Progress</option>
								<option value="Not Played">Not Played</option>
							</select>
						</div>
					</div>

					<div class="user-games-grid">
						@if(isGamesLoading)
						{
							<p><em>Games is loading</em></p>
						}
						else if (gamesToShow is null || !gamesToShow.Any())
						{
							<p><em>No games data</em></p>
						}
						else
						{
							@foreach (var i in gamesToShow)
							{
								<div class="user-game-card">
									<img src="@i.img" alt="Game Banner" class="game-banner">
									<div class="game-overlay">
										<div class="game-title">@i.name</div>
										@if (i.achievementsCount != 0)
										{
											<div class="game-progress">
												<div class="progress-bar" style="width: @((int)(i.completedAchievements / (double)i.achievementsCount * 100))%"></div>
												<span> @((int)(i.completedAchievements / (double)i.achievementsCount * 100))% (@i.completedAchievements/@i.achievementsCount)</span>
											</div>
										}
										<div class="game-playtime">@((int)i.playtimeForever) hrs</div>
									</div>
								</div>
							}
						}
					</div>
				</div> 

				<div class="profile-right">
					<div class="analytics-card">
						<h2><i class="fas fa-chart-pie"></i> Achievement Distribution</h2>
						<div class="chart-container">
							<canvas id="achievementChart"></canvas>
						</div>
						<div class="chart-legend">
							<div class="legend-item"><span class="legend-color" style="background: #4CAF50;"></span> Completed</div>
							<div class="legend-item"><span class="legend-color" style="background: #F44336;"></span> Uncompleted</div>
						</div>
					</div>

					<div class="recent-activity">
						<h2><i class="fas fa-history"></i> Recent Activity</h2>
						<div class="activity-item">
							<div class="activity-icon"><i class="fas fa-medal gold"></i></div>
							<div class="activity-details">
								<div class="activity-text">Unlocked "The Wild Card" in Cyberpunk 2077</div>
								<div class="activity-time">2 hours ago</div>
							</div>
						</div>
						<div class="activity-item">
							<div class="activity-icon"><i class="fas fa-gamepad"></i></div>
							<div class="activity-details">
								<div class="activity-text">Started playing Stardew Valley</div>
								<div class="activity-time">1 day ago</div>
							</div>
						</div>
						<div class="activity-item">
							<div class="activity-icon"><i class="fas fa-medal silver"></i></div>
							<div class="activity-details">
								<div class="activity-text">Unlocked "Legendary" in Halo Infinite</div>
								<div class="activity-time">3 days ago</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</article>
	</main>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
	let achievementChartInstance = null;

	function changeFlowChart(completed, uncompleted) {
		const canvas = document.getElementById('achievementChart');
		const ctx = canvas.getContext('2d');

		if (achievementChartInstance) {
			achievementChartInstance.destroy();
		}

		achievementChartInstance = new Chart(ctx, {
			type: 'doughnut',
			data: {
				labels: ['Completed', 'Uncompleted'],
				datasets: [{
					data: [completed, uncompleted],
					backgroundColor: ['#4CAF50', '#F44336'],
					borderWidth: 0
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				cutout: '70%',
				plugins: { legend: { display: false } }
			}
		});
	}
</script>


@code {
	public Sesion sesion { get; set; }
	private string userId;

	private UserStats? stats;
	private PlayerSummaryModel model;
	private List<SteamPlayerGame>? playerGames;
	private List<SteamPlayerGame>? gamesToShow;

	private bool isLoadingStats = true;
	private bool isLoadingModel = true;
	private bool isGamesLoading = true;

	protected override async Task OnInitializedAsync()
	{
		HttpClient httpClient = HttpClientFactory.CreateClient();
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		var queryParams = QueryHelpers.ParseQuery(uri.Query);

		if (queryParams.TryGetValue("id", out var idValue))
		{
			userId = idValue.FirstOrDefault();
		}

		ulong steamId = ulong.Parse(userId);

		model = await SteamAchievementService.GetPlayerSummaries(steamId);
		stats = await SteamAchievementService.LoadUserStats(httpClient, steamId);
		var buff = await SteamAchievementService.GetPlayerGames(steamId, stats);
		playerGames = buff.Item1;

		if(playerGames != null)
		{
			playerGames = playerGames.OrderByDescending(x => x.achievementsCount)
						.OrderByDescending(x => x.completedAchievements).ToList();
		}

		gamesToShow = playerGames;

		isLoadingStats = false;
		isLoadingModel = false;
		isGamesLoading = false;
	}

	bool isRendered = false;
	protected override async void OnAfterRender(bool firstRender)
	{
		if (!firstRender && !isRendered && stats is not null)
		{
			isRendered = true;
			await JSRuntime.InvokeVoidAsync("changeFlowChart", stats.completedAchievements, stats.totalAchievements - stats.completedAchievements);
		}
	}
}
	@functions
	{
		void OnFilter(ChangeEventArgs e)
	{
		string selectedString = e.Value.ToString();

		switch (selectedString)
		{
			case "All Games":
				gamesToShow = playerGames;
				break;
			case "100% Completed":
				gamesToShow = playerGames
					.Where(x => x.achievementsCount != 0 &&
								x.achievementsCount == x.completedAchievements)
					.ToList();
				break;
			case "In Progress":
				gamesToShow = playerGames
					.Where(x => x.achievementsCount != 0 &&
								x.completedAchievements > 0 &&
								x.achievementsCount != x.completedAchievements)
					.ToList();
				break;
			case "Not Played":
				gamesToShow = playerGames
					.Where(x => x.playtimeForever == 0)
					.ToList();
				break;
			default:
				gamesToShow = playerGames;
				break;
		}
		StateHasChanged();
	}
}