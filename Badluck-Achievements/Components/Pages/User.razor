@using Badluck_Achievements.Components.Data
@using Badluck_Achievements.Components.Models
@using Microsoft.AspNetCore.WebUtilities
@using Steam.Models.SteamCommunity
@using global::Components.Services
@using global::Components.Services_Achievements.Components
@using System.Diagnostics;
@using Microsoft.JSInterop

@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject BadluckAchievementsService BadluckAchievementsService
@inject SteamAchievementService SteamAchievementService
@inject AppDbContext AppDbContext
@inject IJSRuntime JSRuntime

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Badluck Achievements - User profile</PageTitle>

<div class="page">
	<main>
		<article>
			<div class="profile-layout">
				<div class="profile-left">
					<div class="profile-card">
						@if (isLoadingModel)
						{
							<p><em>Profile is loading</em></p>
						}
						else if (model is null)
						{
							<p><em>No header available.</em></p>
						}
						else
						{
							<div class="profile-header">
								<img src="@model.AvatarFullUrl" alt="User Avatar" class="profile-avatar">
								<h2 class="profile-username">@model.Nickname</h2>
								<span class="profile-steamid">SteamID: @model.SteamId</span>
								@if(profileUser != null)
								{
									<p>Registred on service</p>
								}
							</div>
						}

						@if (!isPrivateAccount)
						{
							@if (isLoadingStats && !isRendered)
							{
								<p><em>Stats is loading</em></p>
							}
							else if (stats is null)
							{
								<p><em>No stats available.</em></p>
							}
							else
							{
								<div class="profile-stats">
									<div class="stat-item">
										<span class="stat-label"><i class="fas fa-gamepad"></i> Games Owned</span>
										<span class="stat-value">@stats.TotalGames</span>
									</div>
									<div class="stat-item">
										<span class="stat-label"><i class="fas fa-medal"></i> Completed Achievements</span>
										<span class="stat-value">@stats.CompletedAchievements</span>
									</div>
									<div class="stat-item">
										<span class="stat-label"><i class="fas fa-star"></i> Completion Rate</span>
										<span class="stat-value">@((int)(stats.CalculateCompetionRate() * 100))%</span>
									</div>
									<div class="stat-item">
										<span class="stat-label"><i class="fas fa-clock"></i> Total Playtime</span>
										<span class="stat-value">@((int)stats.HoursPlayed) hrs</span>
									</div>
								</div>
							}
						}
						else
						{
							<h3>Profile is private</h3>
						}

						@if(profileUser != null)
						{
							if(profileUser.IsBanned)
							{
								<p class="user-tag" style="background: red;">Banned on service</p>
							}
							if(profileUser.IsAdmin)
							{
								<p class="user-tag">Admin</p>
							}
							if (currentUser != null)
							{
								if (profileUser.UserId != currentUser.UserId && currentUser.IsAdmin)
								{
									<button class="submit-btn" @onclick="BanAction">@(profileUser.IsBanned ? "Unban" : "Ban")</button>
								}
							}
						}

						<div class="profile-badges">
							@if (!isPrivateAccount)
							{
								<h3><i class="fas fa-award"></i> Rare Badges</h3>
								<div class="badges-grid">
									@if (isLoadingStats && !isRendered)
									{
										<p><em>Achievements is loading</em></p>
									}
									else if (stats is null)
									{
										<p><em>No achievements available.</em></p>
									}
									else if (stats.Achievements.Any())
									{
										foreach (var i in stats.Achievements.OrderBy(x => x.AchievePercentage).Take(16))
										{
											<img src="@i.IconUrl" alt="@i.Name" class="badge-icon" title="@i.AchievePercentage%">
										}
									}
								</div>
							}
						</div>
					</div>
				</div>
				<div class="profile-center">
					<div class="games-header">
						<h2><i class="fas fa-gamepad"></i> Games</h2>
						<div class="games-filter">
							<select class="filter-select" @onchange="OnFilter">
								<option value="All Games">All Games</option>
								<option value="100% Completed">100% Completed</option>
								<option value="In Progress">In Progress</option>
								<option value="Not Played">Not Played</option>
							</select>
						</div>
					</div>

					<div class="user-games-grid">
						@if (!isPrivateAccount)
						{
							@if(isGamesLoading)
							{
								<p><em>Games is loading</em></p>
							}
							else if (gamesToShow is null || !gamesToShow.Any())
							{
								<p><em>No games data</em></p>
							}
							else
							{
								<Virtualize Items="@gamesToShow" Context="i" OverscanCount="40" SpacerElement="tr">
									<a href="/game?id=@i.appID">
										<div class="user-game-card">
											<img src="@i.img" alt="Game Banner" class="game-banner" loading="lazy">
											<div class="game-overlay">
												<div class="game-title">@i.name</div>
												@if (i.achievementsCount != 0)
												{
													<div class="game-progress">
														<div class="progress-bar"
														style="width: @((int)(i.CompletedAchievements / (double)i.achievementsCount * 100))%"></div>
														<span> @((int)(i.CompletedAchievements / (double)i.achievementsCount * 100))% (@i.CompletedAchievements/@i.achievementsCount)</span>
													</div>

												}
												<div class="game-playtime">@((int)i.PlaytimeForever) hrs</div>
											</div>
										</div>
									</a>
								</Virtualize>
							}
						}
					</div>
				</div> 

				<div class="profile-right">
					@if (!isPrivateAccount)
					{
						<div class="analytics-card">
							<h2><i class="fas fa-chart-pie"></i> Analytics</h2>
							<div class="chart-container">
								<div class="profile-flow-chart">
									<h4 style="margin:auto;padding-bottom: 10px;">Achievements</h4>
									<canvas id="achievementChart"></canvas>
									<div class="chart-legend">
										<div class="legend-item"><span class="legend-color" style="background: #4CAF50;"></span> Completed</div>
										<div class="legend-item"><span class="legend-color" style="background: #F44336;"></span> Uncompleted</div>
									</div>
								</div>
								<div class="profile-flow-chart">
									<h4 style="margin:auto;padding-bottom: 10px;">Games</h4>
									<canvas id="gamesChart"></canvas>
									<div class="chart-legend">
										<div class="legend-item"><span class="legend-color" style="background: #6E62D6;"></span> Done</div>
										<div class="legend-item"><span class="legend-color" style="background: #06B6D4;"></span> Ongoing</div>
										<div class="legend-item"><span class="legend-color" style="background: #656565;"></span> Not Started</div>
									</div>
								</div>
							</div>
						</div>
					}
					else
					{
						<h3>Profile is private</h3>
					}
				</div>
			</div>
		</article>
	</main>
</div>

<script src="/js/userFlowChart.js"></script>

@code {
	[Parameter]
	public Sesion? sesion { get; set; }

	public string userId { get; set; } = string.Empty;

	private Data.User? profileUser { get; set; }
	private Data.User? currentUser { get; set; }

	private UserStats? stats;
	private PlayerSummaryModel model;
	private List<SteamPlayerGame>? playerGames;
	private List<SteamPlayerGame>? gamesToShow;

	private bool isLoadingStats = true;
	private bool isLoadingModel = true;
	private bool isGamesLoading = true;

	private bool isPrivateAccount = false;

	protected override async Task OnInitializedAsync()
	{
		HttpClient httpClient = HttpClientFactory.CreateClient();
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		var queryParams = QueryHelpers.ParseQuery(uri.Query);

		if (queryParams.TryGetValue("id", out var idValue))
		{
			userId = idValue.FirstOrDefault()!;
		}
		ulong steamId = ulong.Parse(userId);

		try
		{
			Task<PlayerSummaryModel> modelTask = SteamAchievementService.GetPlayerSummaries(steamId);
			Task<UserStats?> statsTask = SteamAchievementService.LoadUserStats(httpClient, steamId);

			await Task.WhenAll(modelTask, statsTask);

			model = modelTask.Result;
			if (model.ProfileVisibility != ProfileVisibility.Public)
			{
				isPrivateAccount = true;
				throw new Exception("User is private");
			}

			stats = statsTask.Result;

			var buff = await SteamAchievementService.GetPlayerGames(steamId, stats);
			playerGames = buff.Item1;

			if (playerGames != null)
			{
				playerGames = playerGames.OrderByDescending(x => x.achievementsCount)
							.OrderByDescending(x => x.CompletedAchievements).ToList();

				if(!playerGames.Any())
				{
					isPrivateAccount = true;

				}
			}


			gamesToShow = playerGames;
		}
		catch(Exception e)
		{
			Console.WriteLine(e.Message);
			isPrivateAccount = true;
		}
		finally
		{
			isLoadingStats = false;
			isLoadingModel = false;
			isGamesLoading = false;

			ulong sessionSteamId = 0;
			if(sesion != null)
			{
				sessionSteamId = Convert.ToUInt64(sesion.SteamId);
			}

			profileUser = AppDbContext.Users.FirstOrDefault(x => x.SteamId == steamId);

			if(steamId == sessionSteamId)
			{
				currentUser = profileUser;
			}
			else
			{
				currentUser = AppDbContext.Users.FirstOrDefault(x => x.SteamId == sessionSteamId);
			}
		}

	}

	bool isRendered = false;
	protected override async void OnAfterRender(bool firstRender)
	{
		if (!firstRender && !isRendered && stats is not null)
		{
			isRendered = true;

			await JSRuntime.InvokeVoidAsync("renderAchievementsFlowChart", stats.CompletedAchievements, stats.TotalAchievements - stats.CompletedAchievements);

			var games = stats.Games.Where(x => x.TotalAhievements != 0).ToList();
			int allAchievementsGames = games.Count();
			int completedGames = games.Count(x => x.CompletedAchievements == x.TotalAhievements);
			int inProgressGames = games.Count(x => x.CompletedAchievements != x.TotalAhievements && x.CompletedAchievements != 0);

			await JSRuntime.InvokeVoidAsync("renderGamesFlowChart", completedGames, inProgressGames,
				allAchievementsGames - completedGames - inProgressGames);
		}
	}

	private void BanAction(MouseEventArgs args)
	{
		if (currentUser == null || profileUser == null)
			return;

		if (!currentUser.IsAdmin)
			return;

		profileUser.IsBanned = !profileUser.IsBanned;
		AppDbContext.Update(profileUser);
		AppDbContext.SaveChanges();
	}
}

@functions
{
	void OnFilter(ChangeEventArgs e)
	{
		if (playerGames == null)
			return;

		string selectedString = e.Value.ToString();

		switch (selectedString)
		{
			case "All Games":
				gamesToShow = playerGames;
				break;
			case "100% Completed":
				gamesToShow = playerGames
					.Where(x => x.achievementsCount != 0 &&
								x.achievementsCount == x.CompletedAchievements)
					.ToList();
				break;
			case "In Progress":
				gamesToShow = playerGames
					.Where(x => x.achievementsCount != 0 &&
								x.CompletedAchievements > 0 &&
								x.achievementsCount != x.CompletedAchievements)
					.ToList();
				break;
			case "Not Played":
				gamesToShow = playerGames
					.Where(x => x.PlaytimeForever == 0)
					.ToList();
				break;
			default:
				gamesToShow = playerGames;
				break;
		}
		StateHasChanged();
	}
}